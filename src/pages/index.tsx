import { type NextPage } from "next";
import Head from "next/head";

import { LOCATIONS } from "../components/constants";

import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  TimeScale,
  Tooltip,
  Legend,
  Colors,
  Filler,
  type ChartOptions,
} from "chart.js";

import dayjs from "dayjs";
// Adapter to be able to display time series x-axis
import "chartjs-adapter-dayjs-4/dist/chartjs-adapter-dayjs-4.esm";

import { Line } from "react-chartjs-2";
import { useState } from "react";
import Header from "~/components/Header";
import Sidebar from "~/components/Sidebar";
import { api } from "~/utils/api";
import QuestionButton from "~/components/FAQ";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  TimeScale,
  Legend,
  Colors,
  Filler
);

ChartJS.defaults.font.size = 14;
const Home: NextPage = () => {
  // Set the index of the location
  const [locationId, setLocationId] = useState<LocationId>(25);

  const options: ChartOptions<"line"> = {
    responsive: true,
    maintainAspectRatio: false,
    plugins: {
      legend: {
        position: "top",
      },
      title: {
        display: true,
        text: "Historical Crowd Data",
      },
      tooltip: {
        enabled: true,
        mode: "index",
        intersect: false,
      },
    },
    scales: {
      x: {
        type: "time",
        time: {
          unit: "hour",
        },
      },
      y: {
        max: LOCATIONS[locationId].capacity,
      },
    },
  };

  const allCrowdData = api.crowd.crowdLevel.useQuery().data ?? {};
  const currentCrowdData: { [key in LocationId]?: number } = {};
  for (const key of Object.keys(allCrowdData)) {
    const locationId = parseInt(key) as LocationId;
    const presentCrowd = allCrowdData[locationId]?.presentCrowd ?? [];
    currentCrowdData[locationId] =
      presentCrowd[presentCrowd.length - 1]?.crowd_level ?? 0;
  }

  // Construct the data for the line graph
  const datasets = [
    {
      label: LOCATIONS[locationId].name,
      data:
        allCrowdData?.[locationId]?.presentCrowd?.map(
          ({ timestamp, crowd_level }) => {
            return {
              x: dayjs(timestamp).toDate(),
              y: crowd_level,
            };
          }
        ) ?? [],
      fill: "origin",
      tension: 0.4,
      pointStyle: "circle",
      pointRadius: 2,
      backgroundColor: "rgba(23, 37, 84, 0.3)",
      borderColor: "rgba(23, 37, 84, 0.5)",
    },
    {
      label: LOCATIONS[locationId].name + " (Last Week)",
      data:
        allCrowdData?.[locationId]?.pastWeekCrowd?.map(
          ({ timestamp, crowd_level }) => {
            return {
              x: dayjs(timestamp).add(7, "days").toDate(),
              y: crowd_level,
            };
          }
        ) ?? [],
      fill: "origin",
      tension: 0.4,
      backgroundColor: "rgba(134, 118, 255, 0.1)",
      borderColor: "rgba(0, 0, 0, 0)",
      pointStyle: false as const,
    },
  ];

  const data = {
    datasets,
  };

  return (
    <>
      <Head>
        <title>NUS Gym</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-screen flex-col-reverse lg:flex-row">
        <QuestionButton />
        <Sidebar
          index={locationId}
          setIndex={setLocationId}
          currentCrowd={currentCrowdData}
        />
        <div className="relative flex h-screen w-full flex-col items-center">
          <Header />
          <div className="mt-4 h-4/5 w-full lg:h-4/5 lg:w-4/5">
            <Line
              options={options}
              data={data}
              // className="my-4 bg-gradient-to-b from-[#9bf8f4] to-[#6f7bf7]"
            />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
