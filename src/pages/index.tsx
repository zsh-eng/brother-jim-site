import { type NextPage } from "next";
import Head from "next/head";
// import Link from "next/link";
import { LOCATIONS } from "./constants";

// import { api } from "~/utils/api";
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Colors,
  Filler,
  type ChartOptions,
} from "chart.js";
import { Line } from "react-chartjs-2";
import { faker } from "@faker-js/faker";
import { useEffect, useState } from "react";
import Header from "~/components/Header";
import Sidebar from "~/components/Sidebar";

ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  Title,
  Tooltip,
  Legend,
  Colors,
  Filler
);

const options: ChartOptions = {
  responsive: true,
  maintainAspectRatio: false,
  plugins: {
    legend: {
      position: "top" as const,
    },
    title: {
      display: true,
      text: "Historical Crowd Data",
    },
    tooltip: {
      enabled: true,
      mode: "index",
      intersect: false,
    },
  },
};

const labels = Array.from(Array(24).keys()).map((hour) => `${hour}:00`);

const Home: NextPage = () => {
  // Set the index of the location
  const [index, setIndex] = useState(0);

  const [mockData, setMockData] = useState<number[][]>([]);
  // Generate the data for crowd level line graph
  useEffect(() => {
    const newData: number[][] = LOCATIONS.map(() =>
      labels.map(() => faker.number.int({ min: 0, max: 50 }))
    );
    setMockData(newData);
  }, []);

  // Construct the data for the line graph
  const datasets = [
    {
      label: LOCATIONS[index] as string,
      data: mockData[index]?.filter((_, i) => i < 10) as number[],
      fill: "origin",
      tension: 0.4,
      pointStyle: "circle",
      backgroundColor: "rgba(23, 37, 84, 0.3)",
      borderColor: "rgba(23, 37, 84, 0.5)",
    },
    {
      label: (LOCATIONS[index] as string) + " (Last Week)",
      data: mockData[index]?.map(
        (data) => data + faker.number.int({ min: -10, max: 10 })
      ) as number[],
      fill: "origin",
      tension: 0.4,
      backgroundColor: "rgba(134, 118, 255, 0.1)",
      borderColor: "rgba(0, 0, 0, 0)",
      pointStyle: "none",
    },
  ];

  const data = {
    labels,
    datasets,
  };

  return (
    <>
      <Head>
        <title>Brother Jim</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex h-screen w-screen">
        <Sidebar index={index} setIndex={setIndex} />
        <div className="relative flex h-screen w-full flex-col items-center">
          <Header />
          <div className="mt-4 h-2/5 w-full lg:h-4/5 lg:w-4/5">
            <Line
              options={options}
              data={data}
              // className="my-4 bg-gradient-to-b from-[#9bf8f4] to-[#6f7bf7]"
            />
          </div>
        </div>
      </main>
    </>
  );
};

export default Home;
